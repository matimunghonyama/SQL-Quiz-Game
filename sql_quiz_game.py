{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9cfac68d",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'streamlit'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[1], line 1\u001b[0m\n\u001b[1;32m----> 1\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mstreamlit\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mst\u001b[39;00m\n\u001b[0;32m      2\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01msqlite3\u001b[39;00m\n\u001b[0;32m      3\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mrandom\u001b[39;00m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import sqlite3\n",
    "import random\n",
    "\n",
    "# Initialize the database\n",
    "@st.cache_resource\n",
    "def init_db():\n",
    "    conn = sqlite3.connect(':memory:', check_same_thread=False)\n",
    "    c = conn.cursor()\n",
    "    \n",
    "    # Create sample tables\n",
    "    c.execute('''CREATE TABLE IF NOT EXISTS employees\n",
    "                 (id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary INTEGER, hire_date DATE)''')\n",
    "    \n",
    "    c.execute('''CREATE TABLE IF NOT EXISTS departments\n",
    "                 (id INTEGER PRIMARY KEY, name TEXT, location TEXT)''')\n",
    "    \n",
    "    c.execute('''CREATE TABLE IF NOT EXISTS projects\n",
    "                 (id INTEGER PRIMARY KEY, name TEXT, start_date DATE, end_date DATE)''')\n",
    "    \n",
    "    c.execute('''CREATE TABLE IF NOT EXISTS employee_projects\n",
    "                 (employee_id INTEGER, project_id INTEGER,\n",
    "                  FOREIGN KEY(employee_id) REFERENCES employees(id),\n",
    "                  FOREIGN KEY(project_id) REFERENCES projects(id))''')\n",
    "    \n",
    "    # Insert sample data\n",
    "    employees = [\n",
    "        (1, 'John Doe', 'IT', 75000, '2020-01-15'),\n",
    "        (2, 'Jane Smith', 'HR', 65000, '2019-05-11'),\n",
    "        (3, 'Bob Johnson', 'IT', 80000, '2018-03-23'),\n",
    "        (4, 'Alice Brown', 'Marketing', 70000, '2021-09-30'),\n",
    "        (5, 'Charlie Davis', 'HR', 68000, '2020-11-18')\n",
    "    ]\n",
    "    c.executemany('INSERT OR REPLACE INTO employees VALUES (?,?,?,?,?)', employees)\n",
    "    \n",
    "    departments = [\n",
    "        (1, 'IT', 'New York'),\n",
    "        (2, 'HR', 'Chicago'),\n",
    "        (3, 'Marketing', 'Los Angeles'),\n",
    "        (4, 'Finance', 'San Francisco')\n",
    "    ]\n",
    "    c.executemany('INSERT OR REPLACE INTO departments VALUES (?,?,?)', departments)\n",
    "    \n",
    "    projects = [\n",
    "        (1, 'Website Redesign', '2023-01-01', '2023-06-30'),\n",
    "        (2, 'ERP Implementation', '2023-03-15', '2024-03-14'),\n",
    "        (3, 'Marketing Campaign', '2023-05-01', '2023-08-31'),\n",
    "        (4, 'Financial Audit', '2023-09-01', '2023-12-31')\n",
    "    ]\n",
    "    c.executemany('INSERT OR REPLACE INTO projects VALUES (?,?,?,?)', projects)\n",
    "    \n",
    "    employee_projects = [\n",
    "        (1, 1), (3, 1), (2, 2), (4, 3), (5, 4)\n",
    "    ]\n",
    "    c.executemany('INSERT OR REPLACE INTO employee_projects VALUES (?,?)', employee_projects)\n",
    "    \n",
    "    conn.commit()\n",
    "    return conn\n",
    "\n",
    "# Define quiz questions\n",
    "questions = [\n",
    "    {\n",
    "        'question': 'Write a query to select all employees from the IT department.',\n",
    "        'answer': 'SELECT * FROM employees WHERE department = \"IT\"',\n",
    "        'hint': 'Use the WHERE clause to filter by department.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the average salary of all employees.',\n",
    "        'answer': 'SELECT AVG(salary) FROM employees',\n",
    "        'hint': 'Use the AVG function to calculate the average.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the name of the employee with the highest salary.',\n",
    "        'answer': 'SELECT name FROM employees ORDER BY salary DESC LIMIT 1',\n",
    "        'hint': 'Use ORDER BY to sort salaries and LIMIT to get the top result.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to count the number of employees in each department.',\n",
    "        'answer': 'SELECT department, COUNT(*) FROM employees GROUP BY department',\n",
    "        'hint': 'Use GROUP BY to group by department and COUNT to count employees.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find all employees hired in the year 2020.',\n",
    "        'answer': 'SELECT * FROM employees WHERE hire_date LIKE \"2020%\"',\n",
    "        'hint': 'Use the LIKE operator with a wildcard to match dates in 2020.'\n",
    "    }\n",
    "]\n",
    "\n",
    "# Streamlit app\n",
    "def main():\n",
    "    st.title(\"SQL Quiz Game\")\n",
    "    st.write(\"Test your SQL knowledge with this interactive quiz!\")\n",
    "\n",
    "    # Initialize session state\n",
    "    if 'conn' not in st.session_state:\n",
    "        st.session_state.conn = init_db()\n",
    "    if 'current_question' not in st.session_state:\n",
    "        st.session_state.current_question = 0\n",
    "    if 'score' not in st.session_state:\n",
    "        st.session_state.score = 0\n",
    "    if 'total_questions' not in st.session_state:\n",
    "        st.session_state.total_questions = len(questions)\n",
    "    if 'game_over' not in st.session_state:\n",
    "        st.session_state.game_over = False\n",
    "\n",
    "    if not st.session_state.game_over:\n",
    "        question = questions[st.session_state.current_question]\n",
    "        st.subheader(f\"Question {st.session_state.current_question + 1}/{st.session_state.total_questions}\")\n",
    "        st.write(question['question'])\n",
    "\n",
    "        user_query = st.text_area(\"Your SQL query:\")\n",
    "        \n",
    "        if st.button(\"Submit\"):\n",
    "            try:\n",
    "                user_result = st.session_state.conn.execute(user_query).fetchall()\n",
    "                expected_result = st.session_state.conn.execute(question['answer']).fetchall()\n",
    "\n",
    "                if user_result == expected_result:\n",
    "                    st.success(\"Correct!\")\n",
    "                    st.session_state.score += 1\n",
    "                else:\n",
    "                    st.error(\"Incorrect.\")\n",
    "                    st.write(\"The expected query was:\")\n",
    "                    st.code(question['answer'])\n",
    "                    st.write(\"Hint:\", question['hint'])\n",
    "                \n",
    "                st.session_state.current_question += 1\n",
    "                if st.session_state.current_question >= st.session_state.total_questions:\n",
    "                    st.session_state.game_over = True\n",
    "                st.experimental_rerun()\n",
    "            except sqlite3.Error as e:\n",
    "                st.error(f\"Error in your SQL query: {e}\")\n",
    "                st.write(\"Hint:\", question['hint'])\n",
    "\n",
    "    else:\n",
    "        st.subheader(\"Game Over!\")\n",
    "        st.write(f\"Your final score: {st.session_state.score}/{st.session_state.total_questions}\")\n",
    "        if st.button(\"Play Again\"):\n",
    "            st.session_state.current_question = 0\n",
    "            st.session_state.score = 0\n",
    "            st.session_state.game_over = False\n",
    "            st.experimental_rerun()\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c0da1bdd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
