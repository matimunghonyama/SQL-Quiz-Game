{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "740a9090",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Welcome to the SQL Quiz Game!\n",
      "You'll be asked to write SQL queries for sample tables: employees, departments, projects, and employee_projects.\n",
      "Type 'exit' at any time to end the game.\n",
      "\n",
      "Question 1/20:\n",
      "Write a query to find all employees who are not managers (i.e., their name is not in the department table).\n"
     ]
    }
   ],
   "source": [
    "import sqlite3\n",
    "import random\n",
    "\n",
    "# Initialize the database\n",
    "def init_db():\n",
    "    conn = sqlite3.connect(':memory:')\n",
    "    c = conn.cursor()\n",
    "    \n",
    "    # Create sample tables\n",
    "    c.execute('''CREATE TABLE employees\n",
    "                 (id INTEGER PRIMARY KEY, name TEXT, department TEXT, salary INTEGER, hire_date DATE)''')\n",
    "    \n",
    "    c.execute('''CREATE TABLE departments\n",
    "                 (id INTEGER PRIMARY KEY, name TEXT, location TEXT)''')\n",
    "    \n",
    "    c.execute('''CREATE TABLE projects\n",
    "                 (id INTEGER PRIMARY KEY, name TEXT, start_date DATE, end_date DATE)''')\n",
    "    \n",
    "    c.execute('''CREATE TABLE employee_projects\n",
    "                 (employee_id INTEGER, project_id INTEGER,\n",
    "                  FOREIGN KEY(employee_id) REFERENCES employees(id),\n",
    "                  FOREIGN KEY(project_id) REFERENCES projects(id))''')\n",
    "    \n",
    "    # Insert sample data\n",
    "    employees = [\n",
    "        (1, 'John Doe', 'IT', 75000, '2020-01-15'),\n",
    "        (2, 'Jane Smith', 'HR', 65000, '2019-05-11'),\n",
    "        (3, 'Bob Johnson', 'IT', 80000, '2018-03-23'),\n",
    "        (4, 'Alice Brown', 'Marketing', 70000, '2021-09-30'),\n",
    "        (5, 'Charlie Davis', 'HR', 68000, '2020-11-18'),\n",
    "        (6, 'Eva Wilson', 'IT', 72000, '2019-07-08'),\n",
    "        (7, 'Frank Miller', 'Marketing', 69000, '2022-02-14'),\n",
    "        (8, 'Grace Lee', 'Finance', 82000, '2018-09-22'),\n",
    "        (9, 'Henry Taylor', 'IT', 77000, '2021-04-01'),\n",
    "        (10, 'Ivy Chen', 'Finance', 79000, '2020-08-07')\n",
    "    ]\n",
    "    c.executemany('INSERT INTO employees VALUES (?,?,?,?,?)', employees)\n",
    "    \n",
    "    departments = [\n",
    "        (1, 'IT', 'New York'),\n",
    "        (2, 'HR', 'Chicago'),\n",
    "        (3, 'Marketing', 'Los Angeles'),\n",
    "        (4, 'Finance', 'San Francisco')\n",
    "    ]\n",
    "    c.executemany('INSERT INTO departments VALUES (?,?,?)', departments)\n",
    "    \n",
    "    projects = [\n",
    "        (1, 'Website Redesign', '2023-01-01', '2023-06-30'),\n",
    "        (2, 'ERP Implementation', '2023-03-15', '2024-03-14'),\n",
    "        (3, 'Marketing Campaign', '2023-05-01', '2023-08-31'),\n",
    "        (4, 'Financial Audit', '2023-09-01', '2023-12-31')\n",
    "    ]\n",
    "    c.executemany('INSERT INTO projects VALUES (?,?,?,?)', projects)\n",
    "    \n",
    "    employee_projects = [\n",
    "        (1, 1), (3, 1), (6, 1), (9, 1),\n",
    "        (2, 2), (5, 2), (8, 2), (10, 2),\n",
    "        (4, 3), (7, 3),\n",
    "        (8, 4), (10, 4)\n",
    "    ]\n",
    "    c.executemany('INSERT INTO employee_projects VALUES (?,?)', employee_projects)\n",
    "    \n",
    "    conn.commit()\n",
    "    return conn\n",
    "\n",
    "# Define quiz questions\n",
    "questions = [\n",
    "    {\n",
    "        'question': 'Write a query to select all employees from the IT department.',\n",
    "        'answer': 'SELECT * FROM employees WHERE department = \"IT\"',\n",
    "        'hint': 'Use the WHERE clause to filter by department.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the average salary of all employees.',\n",
    "        'answer': 'SELECT AVG(salary) FROM employees',\n",
    "        'hint': 'Use the AVG function to calculate the average.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the name of the employee with the highest salary.',\n",
    "        'answer': 'SELECT name FROM employees ORDER BY salary DESC LIMIT 1',\n",
    "        'hint': 'Use ORDER BY to sort salaries and LIMIT to get the top result.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to count the number of employees in each department.',\n",
    "        'answer': 'SELECT department, COUNT(*) FROM employees GROUP BY department',\n",
    "        'hint': 'Use GROUP BY to group by department and COUNT to count employees.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find all employees hired in the year 2020.',\n",
    "        'answer': 'SELECT * FROM employees WHERE hire_date LIKE \"2020%\"',\n",
    "        'hint': 'Use the LIKE operator with a wildcard to match dates in 2020.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to list all departments and their locations.',\n",
    "        'answer': 'SELECT * FROM departments',\n",
    "        'hint': 'A simple SELECT statement will suffice for this question.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the total salary budget for each department.',\n",
    "        'answer': 'SELECT department, SUM(salary) FROM employees GROUP BY department',\n",
    "        'hint': 'Use GROUP BY with the SUM function to calculate total salaries.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to list all projects and their durations in days.',\n",
    "        'answer': 'SELECT name, JULIANDAY(end_date) - JULIANDAY(start_date) AS duration FROM projects',\n",
    "        'hint': 'Use JULIANDAY to calculate the difference between dates.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find all employees working on the \"Website Redesign\" project.',\n",
    "        'answer': 'SELECT e.name FROM employees e JOIN employee_projects ep ON e.id = ep.employee_id JOIN projects p ON ep.project_id = p.id WHERE p.name = \"Website Redesign\"',\n",
    "        'hint': 'You\\'ll need to JOIN three tables: employees, employee_projects, and projects.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the department with the highest average salary.',\n",
    "        'answer': 'SELECT department, AVG(salary) AS avg_salary FROM employees GROUP BY department ORDER BY avg_salary DESC LIMIT 1',\n",
    "        'hint': 'Combine GROUP BY, ORDER BY, and LIMIT to find the top department.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to list employees who are not assigned to any project.',\n",
    "        'answer': 'SELECT name FROM employees WHERE id NOT IN (SELECT employee_id FROM employee_projects)',\n",
    "        'hint': 'Use a subquery with NOT IN to find employees not in employee_projects.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the project with the most employees assigned to it.',\n",
    "        'answer': 'SELECT p.name, COUNT(*) AS employee_count FROM projects p JOIN employee_projects ep ON p.id = ep.project_id GROUP BY p.id ORDER BY employee_count DESC LIMIT 1',\n",
    "        'hint': 'Join projects and employee_projects, then use GROUP BY and ORDER BY.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to calculate the average tenure (in years) of employees in each department.',\n",
    "        'answer': 'SELECT department, AVG((JULIANDAY(\"now\") - JULIANDAY(hire_date)) / 365.0) AS avg_tenure FROM employees GROUP BY department',\n",
    "        'hint': 'Use JULIANDAY to calculate the difference between now and hire_date.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find all employees who earn more than the average salary of their department.',\n",
    "        'answer': 'SELECT e1.name, e1.salary, e1.department FROM employees e1 WHERE e1.salary > (SELECT AVG(e2.salary) FROM employees e2 WHERE e2.department = e1.department)',\n",
    "        'hint': 'Use a correlated subquery to compare each employee\\'s salary to their department average.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to list all departments along with the count of employees, even if the department has no employees.',\n",
    "        'answer': 'SELECT d.name, COUNT(e.id) FROM departments d LEFT JOIN employees e ON d.name = e.department GROUP BY d.name',\n",
    "        'hint': 'Use a LEFT JOIN to include all departments, even those without employees.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find the employee(s) who joined most recently.',\n",
    "        'answer': 'SELECT name, hire_date FROM employees WHERE hire_date = (SELECT MAX(hire_date) FROM employees)',\n",
    "        'hint': 'Use a subquery to find the maximum hire_date.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to list all projects along with the count of employees assigned to each.',\n",
    "        'answer': 'SELECT p.name, COUNT(ep.employee_id) AS employee_count FROM projects p LEFT JOIN employee_projects ep ON p.id = ep.project_id GROUP BY p.id',\n",
    "        'hint': 'Use a LEFT JOIN to include all projects, even those without assigned employees.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find all employees who are not managers (i.e., their name is not in the department table).',\n",
    "        'answer': 'SELECT name FROM employees WHERE name NOT IN (SELECT name FROM departments)',\n",
    "        'hint': 'Use NOT IN with a subquery to exclude employees whose names are in the departments table.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to calculate the total duration of all projects in months.',\n",
    "        'answer': 'SELECT SUM((JULIANDAY(end_date) - JULIANDAY(start_date)) / 30.0) AS total_months FROM projects',\n",
    "        'hint': 'Use JULIANDAY to calculate the difference, then divide by 30 for approximate months.'\n",
    "    },\n",
    "    {\n",
    "        'question': 'Write a query to find employees who are working on more than one project.',\n",
    "        'answer': 'SELECT e.name, COUNT(ep.project_id) AS project_count FROM employees e JOIN employee_projects ep ON e.id = ep.employee_id GROUP BY e.id HAVING project_count > 1',\n",
    "        'hint': 'Join employees and employee_projects, then use GROUP BY and HAVING.'\n",
    "    }\n",
    "]\n",
    "\n",
    "def run_game(conn):\n",
    "    score = 0\n",
    "    total_questions = len(questions)\n",
    "    \n",
    "    print(\"Welcome to the SQL Quiz Game!\")\n",
    "    print(\"You'll be asked to write SQL queries for sample tables: employees, departments, projects, and employee_projects.\")\n",
    "    print(\"Type 'exit' at any time to end the game.\")\n",
    "    \n",
    "    for i, q in enumerate(random.sample(questions, total_questions), 1):\n",
    "        print(f\"\\nQuestion {i}/{total_questions}:\")\n",
    "        print(q['question'])\n",
    "        \n",
    "        user_query = input(\"Your SQL query: \")\n",
    "        \n",
    "        if user_query.lower() == 'exit':\n",
    "            print(\"Thanks for playing!\")\n",
    "            break\n",
    "        \n",
    "        try:\n",
    "            user_result = conn.execute(user_query).fetchall()\n",
    "            expected_result = conn.execute(q['answer']).fetchall()\n",
    "            \n",
    "            if user_result == expected_result:\n",
    "                print(\"Correct!\")\n",
    "                score += 1\n",
    "            else:\n",
    "                print(\"Incorrect. The expected query was:\")\n",
    "                print(q['answer'])\n",
    "                print(\"Hint:\", q['hint'])\n",
    "        except sqlite3.Error as e:\n",
    "            print(f\"Error in your SQL query: {e}\")\n",
    "            print(\"Hint:\", q['hint'])\n",
    "    \n",
    "    print(f\"\\nGame Over! Your score: {score}/{total_questions}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    conn = init_db()\n",
    "    run_game(conn)\n",
    "    conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c11198b5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
